import io.micronaut.internal.WriteVersion
import io.micronaut.internal.WriteModuleList

plugins {
    id 'io.micronaut.build.internal.test-resources-module'
}

micronautBuild {
    enableBom = false
    enableProcessing = false
}

configurations.all {
    dependencies.clear()
}

description = """
A module designed to be integrated with build tools. Its
responsibility is to provide a list of dependencies to add
to the classpath of the test resources service, given a user
classpath.
"""

def writeVersion = tasks.register("writeVersionClass", WriteVersion) {
    outputDirectory.set(layout.buildDirectory.dir("version-info"))
    getPackage().set("io.micronaut.testresources.buildtools")
    version.set(project.version as String)
}
def writeModuleList = tasks.register("writeModuleList", WriteModuleList) {
    outputDirectory.set(layout.buildDirectory.dir("module-list"))
    getPackage().set("io.micronaut.testresources.buildtools")
    def thisProject = project
    modules = rootProject.allprojects.findAll { it != thisProject && it != rootProject }
            .collect { it.name - 'test-resources-' }
            .groupBy {
                if (it.startsWith('jdbc')) {
                    'jdbc'
                } else if (it.startsWith('r2dbc')) {
                    'r2dbc'
                } else if (it in ['core', 'bom', 'embedded', 'client', 'testcontainers']) {
                    'core'
                } else {
                    'modules'
                }
            }
    moduleDescriptions.put('core', 'Core modules')
    moduleDescriptions.put('jdbc', 'JDBC modules')
    moduleDescriptions.put('r2dbc', 'R2DBC modules')
    moduleDescriptions.put('modules', 'Extra modules')
}

sourceSets.main.java.srcDirs(writeVersion, writeModuleList)

dependencies {
    implementation(mn.slf4j)
    testImplementation(platform(mn.micronaut.bom))
    testImplementation(mn.micronaut.inject.groovy)
    testImplementation(mn.micronaut.http.server.netty)
    testImplementation(mn.spock)
    testRuntimeOnly(mn.micronaut.serde.jackson)
}
